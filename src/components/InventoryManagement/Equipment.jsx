import React, { useState, useEffect } from 'react';
import './Equipment.css';

const Equipment = ({ userRole, addNotification }) => {
  const [equipment, setEquipment] = useState([]);
  const [filteredEquipment, setFilteredEquipment] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [departmentFilter, setDepartmentFilter] = useState('all');
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [selectedEquipment, setSelectedEquipment] = useState(null);

  const [newEquipment, setNewEquipment] = useState({
    name: '',
    type: '',
    model: '',
    serialNumber: '',
    department: '',
    location: '',
    status: 'active',
    purchaseDate: '',
    warrantyExpiry: '',
    supplier: '',
    price: 0,
    description: '',
    assignedTo: ''
  });

  useEffect(() => {
    // Gi·∫£ l·∫≠p d·ªØ li·ªáu thi·∫øt b·ªã
    const mockEquipment = [
      {
        id: 1,
        name: 'M√°y t√≠nh Dell OptiPlex 7090',
        type: 'M√°y t√≠nh ƒë·ªÉ b√†n',
        model: 'OptiPlex 7090',
        serialNumber: 'DL7090X001',
        department: 'Ph√≤ng Y t·∫ø',
        location: 'T·∫ßng 2 - Ph√≤ng 201',
        status: 'active',
        purchaseDate: '2023-06-15',
        warrantyExpiry: '2026-06-15',
        supplier: 'C√¥ng ty TNHH ABC',
        price: 18500000,
        description: 'M√°y t√≠nh Dell OptiPlex 7090, Intel Core i7, RAM 16GB, SSD 512GB',
        assignedTo: 'Nguy·ªÖn VƒÉn A',
        lastMaintenance: '2024-01-10',
        nextMaintenance: '2024-04-10'
      },
      {
        id: 2,
        name: 'M√°y in HP LaserJet Pro M404n',
        type: 'M√°y in',
        model: 'LaserJet Pro M404n',
        serialNumber: 'HP404N001',
        department: 'Ph√≤ng K·∫ø to√°n',
        location: 'T·∫ßng 1 - Ph√≤ng 105',
        status: 'maintenance',
        purchaseDate: '2023-03-20',
        warrantyExpiry: '2026-03-20',
        supplier: 'C√¥ng ty TNHH XYZ',
        price: 8500000,
        description: 'M√°y in laser ƒëen tr·∫Øng HP, t·ªëc ƒë·ªô in 40 trang/ph√∫t',
        assignedTo: 'Tr·∫ßn Th·ªã B',
        lastMaintenance: '2024-01-05',
        nextMaintenance: '2024-04-05'
      },
      {
        id: 3,
        name: 'Laptop Dell Latitude 5520',
        type: 'Laptop',
        model: 'Latitude 5520',
        serialNumber: 'DL5520X002',
        department: 'Ph√≤ng H√†nh ch√≠nh',
        location: 'T·∫ßng 1 - Ph√≤ng 101',
        status: 'active',
        purchaseDate: '2023-08-10',
        warrantyExpiry: '2026-08-10',
        supplier: 'C√¥ng ty TNHH DEF',
        price: 22500000,
        description: 'Laptop Dell Latitude 5520, Intel Core i5, RAM 8GB, SSD 256GB',
        assignedTo: 'L√™ VƒÉn C',
        lastMaintenance: '2024-01-15',
        nextMaintenance: '2024-04-15'
      },
      {
        id: 4,
        name: 'M√°y chi·∫øu Epson EB-X41',
        type: 'M√°y chi·∫øu',
        model: 'EB-X41',
        serialNumber: 'EPX41X001',
        department: 'Ph√≤ng H·ªçp',
        location: 'T·∫ßng 3 - Ph√≤ng 301',
        status: 'repair',
        purchaseDate: '2022-12-05',
        warrantyExpiry: '2025-12-05',
        supplier: 'C√¥ng ty TNHH GHI',
        price: 12500000,
        description: 'M√°y chi·∫øu Epson EB-X41, ƒë·ªô ph√¢n gi·∫£i XGA, ƒë·ªô s√°ng 3300 lumens',
        assignedTo: 'Ph·∫°m Th·ªã D',
        lastMaintenance: '2023-12-20',
        nextMaintenance: '2024-03-20'
      },
      {
        id: 5,
        name: 'Switch Cisco Catalyst 2960',
        type: 'Thi·∫øt b·ªã m·∫°ng',
        model: 'Catalyst 2960',
        serialNumber: 'CS2960X001',
        department: 'Ph√≤ng CNTT',
        location: 'T·∫ßng 1 - Ph√≤ng Server',
        status: 'active',
        purchaseDate: '2023-01-15',
        warrantyExpiry: '2028-01-15',
        supplier: 'C√¥ng ty TNHH JKL',
        price: 8500000,
        description: 'Switch Cisco Catalyst 2960, 24 port Gigabit Ethernet',
        assignedTo: 'V≈© VƒÉn E',
        lastMaintenance: '2024-01-01',
        nextMaintenance: '2024-04-01'
      }
    ];

    setEquipment(mockEquipment);
    setFilteredEquipment(mockEquipment);
  }, []);

  useEffect(() => {
    let filtered = equipment;
    
    if (searchTerm) {
      filtered = filtered.filter(item => 
        item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.model.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.serialNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.department.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    if (statusFilter !== 'all') {
      filtered = filtered.filter(item => item.status === statusFilter);
    }
    
    if (departmentFilter !== 'all') {
      filtered = filtered.filter(item => item.department === departmentFilter);
    }
    
    setFilteredEquipment(filtered);
  }, [searchTerm, statusFilter, departmentFilter, equipment]);

  const equipmentTypes = ['M√°y t√≠nh ƒë·ªÉ b√†n', 'Laptop', 'M√°y in', 'M√°y chi·∫øu', 'Thi·∫øt b·ªã m·∫°ng', 'M√°y ch·ªß', 'Kh√°c'];
  const departments = ['Ph√≤ng Y t·∫ø', 'Ph√≤ng K·∫ø to√°n', 'Ph√≤ng H√†nh ch√≠nh', 'Ph√≤ng H·ªçp', 'Ph√≤ng CNTT', 'Ph√≤ng Kh√°m b·ªánh'];
  const statuses = ['active', 'maintenance', 'repair', 'retired', 'lost'];

  const getStatusInfo = (status) => {
    switch (status) {
      case 'active':
        return { text: 'ƒêang ho·∫°t ƒë·ªông', color: '#27ae60', icon: '‚úÖ' };
      case 'maintenance':
        return { text: 'B·∫£o tr√¨', color: '#f39c12', icon: 'üîß' };
      case 'repair':
        return { text: 'S·ª≠a ch·ªØa', color: '#e74c3c', icon: 'üõ†Ô∏è' };
      case 'retired':
        return { text: 'ƒê√£ ngh·ªâ h∆∞u', color: '#95a5a6', icon: 'üì¥' };
      case 'lost':
        return { text: 'M·∫•t/Th·∫•t l·∫°c', color: '#9b59b6', icon: '‚ùì' };
      default:
        return { text: 'Kh√¥ng x√°c ƒë·ªãnh', color: '#95a5a6', icon: '‚ùì' };
    }
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  };

  const handleAddEquipment = () => {
    if (!newEquipment.name || !newEquipment.type || !newEquipment.model) {
      addNotification('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc', 'error');
      return;
    }

    const equipment = {
      ...newEquipment,
      id: Date.now(),
      lastMaintenance: new Date().toISOString().split('T')[0],
      nextMaintenance: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
    };

    setEquipment(prev => [...prev, equipment]);
    setNewEquipment({
      name: '', type: '', model: '', serialNumber: '', department: '',
      location: '', status: 'active', purchaseDate: '', warrantyExpiry: '',
      supplier: '', price: 0, description: '', assignedTo: ''
    });
    setShowAddModal(false);
    addNotification('Th√™m thi·∫øt b·ªã m·ªõi th√†nh c√¥ng!', 'success');
  };

  const handleEditEquipment = () => {
    if (!selectedEquipment.name || !selectedEquipment.type || !selectedEquipment.model) {
      addNotification('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc', 'error');
      return;
    }

    setEquipment(prev => prev.map(item => 
      item.id === selectedEquipment.id ? selectedEquipment : item
    ));
    setShowEditModal(false);
    setSelectedEquipment(null);
    addNotification('C·∫≠p nh·∫≠t thi·∫øt b·ªã th√†nh c√¥ng!', 'success');
  };

  const handleStatusChange = (equipmentId, newStatus) => {
    setEquipment(prev => prev.map(item => 
      item.id === equipmentId ? { ...item, status: newStatus } : item
    ));
    addNotification('C·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã th√†nh c√¥ng!', 'success');
  };

  return (
    <div className="equipment">
      <div className="equipment-header">
        <h1>üíª QU·∫¢N L√ù THI·∫æT B·ªä CNTT</h1>
        <p>Qu·∫£n l√Ω trang thi·∫øt b·ªã CNTT trong to√†n b·ªánh vi·ªán</p>
      </div>

      {/* Controls */}
      <div className="equipment-controls">
        <div className="search-filters">
          <div className="search-box">
            <input
              type="text"
              placeholder="T√¨m ki·∫øm thi·∫øt b·ªã..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="status-filter"
          >
            <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
            {statuses.map(status => (
              <option key={status} value={status}>
                {getStatusInfo(status).text}
              </option>
            ))}
          </select>

          <select
            value={departmentFilter}
            onChange={(e) => setDepartmentFilter(e.target.value)}
            className="department-filter"
          >
            <option value="all">T·∫•t c·∫£ ph√≤ng ban</option>
            {departments.map(dept => (
              <option key={dept} value={dept}>{dept}</option>
            ))}
          </select>
        </div>

        <div className="action-buttons">
          {userRole === 'admin' && (
            <button 
              className="btn btn-primary"
              onClick={() => setShowAddModal(true)}
            >
              ‚ûï Th√™m thi·∫øt b·ªã
            </button>
          )}
        </div>
      </div>

      {/* Equipment Grid */}
      <div className="equipment-grid">
        {filteredEquipment.map(item => {
          const statusInfo = getStatusInfo(item.status);
          return (
            <div key={item.id} className="equipment-card">
              <div className="equipment-header-card">
                <div className="equipment-icon">
                  {item.type === 'M√°y t√≠nh ƒë·ªÉ b√†n' || item.type === 'Laptop' ? 'üíª' :
                   item.type === 'M√°y in' ? 'üñ®Ô∏è' :
                   item.type === 'M√°y chi·∫øu' ? 'üìΩÔ∏è' :
                   item.type === 'Thi·∫øt b·ªã m·∫°ng' ? 'üåê' :
                   item.type === 'M√°y ch·ªß' ? 'üñ•Ô∏è' : 'üîå'}
                </div>
                <div className="equipment-status">
                  <span 
                    className="status-badge"
                    style={{ backgroundColor: statusInfo.color }}
                  >
                    {statusInfo.icon} {statusInfo.text}
                  </span>
                </div>
              </div>

              <div className="equipment-content">
                <h3 className="equipment-name">{item.name}</h3>
                <p className="equipment-model">{item.model}</p>
                
                <div className="equipment-details">
                  <div className="detail-row">
                    <span className="detail-label">S·ªë serial:</span>
                    <span className="detail-value">{item.serialNumber}</span>
                  </div>
                  <div className="detail-row">
                    <span className="detail-label">Ph√≤ng ban:</span>
                    <span className="detail-value">{item.department}</span>
                  </div>
                  <div className="detail-row">
                    <span className="detail-label">V·ªã tr√≠:</span>
                    <span className="detail-value">{item.location}</span>
                  </div>
                  <div className="detail-row">
                    <span className="detail-label">Ng∆∞·ªùi s·ª≠ d·ª•ng:</span>
                    <span className="detail-value">{item.assignedTo}</span>
                  </div>
                  <div className="detail-row">
                    <span className="detail-label">B·∫£o tr√¨ ti·∫øp theo:</span>
                    <span className="detail-value">{item.nextMaintenance}</span>
                  </div>
                </div>

                <div className="equipment-actions">
                  <button 
                    className="btn-small btn-info"
                    onClick={() => setSelectedEquipment(item)}
                    title="Xem chi ti·∫øt"
                  >
                    üìã Chi ti·∫øt
                  </button>
                  
                  {userRole === 'admin' && (
                    <>
                      <button 
                        className="btn-small btn-warning"
                        onClick={() => {
                          setSelectedEquipment(item);
                          setShowEditModal(true);
                        }}
                        title="Ch·ªânh s·ª≠a"
                      >
                        ‚úèÔ∏è S·ª≠a
                      </button>
                      
                      <select
                        value={item.status}
                        onChange={(e) => handleStatusChange(item.id, e.target.value)}
                        className="status-select"
                      >
                        {statuses.map(status => (
                          <option key={status} value={status}>
                            {getStatusInfo(status).text}
                          </option>
                        ))}
                      </select>
                    </>
                  )}
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Add Equipment Modal */}
      {showAddModal && (
        <div className="modal-overlay">
          <div className="modal">
            <div className="modal-header">
              <h3>‚ûï Th√™m thi·∫øt b·ªã m·ªõi</h3>
              <button 
                className="modal-close"
                onClick={() => setShowAddModal(false)}
              >
                √ó
              </button>
            </div>
            <div className="modal-body">
              <div className="form-row">
                <div className="form-group">
                  <label>T√™n thi·∫øt b·ªã *</label>
                  <input
                    type="text"
                    value={newEquipment.name}
                    onChange={(e) => setNewEquipment({...newEquipment, name: e.target.value})}
                    placeholder="Nh·∫≠p t√™n thi·∫øt b·ªã"
                  />
                </div>
                <div className="form-group">
                  <label>Lo·∫°i thi·∫øt b·ªã *</label>
                  <select
                    value={newEquipment.type}
                    onChange={(e) => setNewEquipment({...newEquipment, type: e.target.value})}
                  >
                    <option value="">Ch·ªçn lo·∫°i thi·∫øt b·ªã</option>
                    {equipmentTypes.map(type => (
                      <option key={type} value={type}>{type}</option>
                    ))}
                  </select>
                </div>
              </div>
              
              <div className="form-row">
                <div className="form-group">
                  <label>Model *</label>
                  <input
                    type="text"
                    value={newEquipment.model}
                    onChange={(e) => setNewEquipment({...newEquipment, model: e.target.value})}
                    placeholder="Nh·∫≠p model thi·∫øt b·ªã"
                  />
                </div>
                <div className="form-group">
                  <label>S·ªë serial</label>
                  <input
                    type="text"
                    value={newEquipment.serialNumber}
                    onChange={(e) => setNewEquipment({...newEquipment, serialNumber: e.target.value})}
                    placeholder="Nh·∫≠p s·ªë serial"
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>Ph√≤ng ban</label>
                  <select
                    value={newEquipment.department}
                    onChange={(e) => setNewEquipment({...newEquipment, department: e.target.value})}
                  >
                    <option value="">Ch·ªçn ph√≤ng ban</option>
                    {departments.map(dept => (
                      <option key={dept} value={dept}>{dept}</option>
                    ))}
                  </select>
                </div>
                <div className="form-group">
                  <label>V·ªã tr√≠</label>
                  <input
                    type="text"
                    value={newEquipment.location}
                    onChange={(e) => setNewEquipment({...newEquipment, location: e.target.value})}
                    placeholder="Nh·∫≠p v·ªã tr√≠ c·ª• th·ªÉ"
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>Ng√†y mua</label>
                  <input
                    type="date"
                    value={newEquipment.purchaseDate}
                    onChange={(e) => setNewEquipment({...newEquipment, purchaseDate: e.target.value})}
                  />
                </div>
                <div className="form-group">
                  <label>H·∫øt h·∫°n b·∫£o h√†nh</label>
                  <input
                    type="date"
                    value={newEquipment.warrantyExpiry}
                    onChange={(e) => setNewEquipment({...newEquipment, warrantyExpiry: e.target.value})}
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>Nh√† cung c·∫•p</label>
                  <input
                    type="text"
                    value={newEquipment.supplier}
                    onChange={(e) => setNewEquipment({...newEquipment, supplier: e.target.value})}
                    placeholder="Nh·∫≠p t√™n nh√† cung c·∫•p"
                  />
                </div>
                <div className="form-group">
                  <label>Gi√° (VNƒê)</label>
                  <input
                    type="number"
                    value={newEquipment.price}
                    onChange={(e) => setNewEquipment({...newEquipment, price: parseInt(e.target.value)})}
                    min="0"
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>Ng∆∞·ªùi s·ª≠ d·ª•ng</label>
                  <input
                    type="text"
                    value={newEquipment.assignedTo}
                    onChange={(e) => setNewEquipment({...newEquipment, assignedTo: e.target.value})}
                    placeholder="Nh·∫≠p t√™n ng∆∞·ªùi s·ª≠ d·ª•ng"
                  />
                </div>
                <div className="form-group">
                  <label>Tr·∫°ng th√°i</label>
                  <select
                    value={newEquipment.status}
                    onChange={(e) => setNewEquipment({...newEquipment, status: e.target.value})}
                  >
                    {statuses.map(status => (
                      <option key={status} value={status}>
                        {getStatusInfo(status).text}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              <div className="form-group">
                <label>M√¥ t·∫£</label>
                <textarea
                  value={newEquipment.description}
                  onChange={(e) => setNewEquipment({...newEquipment, description: e.target.value})}
                  placeholder="M√¥ t·∫£ chi ti·∫øt thi·∫øt b·ªã..."
                  rows="3"
                />
              </div>
            </div>
            <div className="modal-footer">
              <button 
                className="btn btn-secondary"
                onClick={() => setShowAddModal(false)}
              >
                H·ªßy
              </button>
              <button 
                className="btn btn-primary"
                onClick={handleAddEquipment}
              >
                Th√™m thi·∫øt b·ªã
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Edit Equipment Modal */}
      {showEditModal && selectedEquipment && (
        <div className="modal-overlay">
          <div className="modal">
            <div className="modal-header">
              <h3>‚úèÔ∏è Ch·ªânh s·ª≠a thi·∫øt b·ªã</h3>
              <button 
                className="modal-close"
                onClick={() => {
                  setShowEditModal(false);
                  setSelectedEquipment(null);
                }}
              >
                √ó
              </button>
            </div>
            <div className="modal-body">
              <div className="form-row">
                <div className="form-group">
                  <label>T√™n thi·∫øt b·ªã *</label>
                  <input
                    type="text"
                    value={selectedEquipment.name}
                    onChange={(e) => setSelectedEquipment({...selectedEquipment, name: e.target.value})}
                  />
                </div>
                <div className="form-group">
                  <label>Lo·∫°i thi·∫øt b·ªã *</label>
                  <select
                    value={selectedEquipment.type}
                    onChange={(e) => setSelectedEquipment({...selectedEquipment, type: e.target.value})}
                  >
                    {equipmentTypes.map(type => (
                      <option key={type} value={type}>{type}</option>
                    ))}
                  </select>
                </div>
              </div>
              
              <div className="form-row">
                <div className="form-group">
                  <label>Model *</label>
                  <input
                    type="text"
                    value={selectedEquipment.model}
                    onChange={(e) => setSelectedEquipment({...selectedEquipment, model: e.target.value})}
                  />
                </div>
                <div className="form-group">
                  <label>S·ªë serial</label>
                  <input
                    type="text"
                    value={selectedEquipment.serialNumber}
                    onChange={(e) => setSelectedEquipment({...selectedEquipment, serialNumber: e.target.value})}
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>Ph√≤ng ban</label>
                  <select
                    value={selectedEquipment.department}
                    onChange={(e) => setSelectedEquipment({...selectedEquipment, department: e.target.value})}
                  >
                    {departments.map(dept => (
                      <option key={dept} value={dept}>{dept}</option>
                    ))}
                  </select>
                </div>
                <div className="form-group">
                  <label>V·ªã tr√≠</label>
                  <input
                    type="text"
                    value={selectedEquipment.location}
                    onChange={(e) => setSelectedEquipment({...selectedEquipment, location: e.target.value})}
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>Ng√†y mua</label>
                  <input
                    type="date"
                    value={selectedEquipment.purchaseDate}
                    onChange={(e) => setSelectedEquipment({...selectedEquipment, purchaseDate: e.target.value})}
                  />
                </div>
                <div className="form-group">
                  <label>H·∫øt h·∫°n b·∫£o h√†nh</label>
                  <input
                    type="date"
                    value={selectedEquipment.warrantyExpiry}
                    onChange={(e) => setSelectedEquipment({...selectedEquipment, warrantyExpiry: e.target.value})}
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>Nh√† cung c·∫•p</label>
                  <input
                    type="text"
                    value={selectedEquipment.supplier}
                    onChange={(e) => setSelectedEquipment({...selectedEquipment, supplier: e.target.value})}
                  />
                </div>
                <div className="form-group">
                  <label>Gi√° (VNƒê)</label>
                  <input
                    type="number"
                    value={selectedEquipment.price}
                    onChange={(e) => setSelectedEquipment({...selectedEquipment, price: parseInt(e.target.value)})}
                    min="0"
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>Ng∆∞·ªùi s·ª≠ d·ª•ng</label>
                  <input
                    type="text"
                    value={selectedEquipment.assignedTo}
                    onChange={(e) => setSelectedEquipment({...selectedEquipment, assignedTo: e.target.value})}
                  />
                </div>
                <div className="form-group">
                  <label>Tr·∫°ng th√°i</label>
                  <select
                    value={selectedEquipment.status}
                    onChange={(e) => setSelectedEquipment({...selectedEquipment, status: e.target.value})}
                  >
                    {statuses.map(status => (
                      <option key={status} value={status}>
                        {getStatusInfo(status).text}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              <div className="form-group">
                <label>M√¥ t·∫£</label>
                <textarea
                  value={selectedEquipment.description}
                  onChange={(e) => setSelectedEquipment({...selectedEquipment, description: e.target.value})}
                  rows="3"
                />
              </div>
            </div>
            <div className="modal-footer">
              <button 
                className="btn btn-secondary"
                onClick={() => {
                  setShowEditModal(false);
                  setSelectedEquipment(null);
                }}
              >
                H·ªßy
              </button>
              <button 
                className="btn btn-primary"
                onClick={handleEditEquipment}
              >
                C·∫≠p nh·∫≠t
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Equipment Detail Modal */}
      {selectedEquipment && !showEditModal && (
        <div className="modal-overlay">
          <div className="modal">
            <div className="modal-header">
              <h3>üìã Chi ti·∫øt thi·∫øt b·ªã</h3>
              <button 
                className="modal-close"
                onClick={() => setSelectedEquipment(null)}
              >
                √ó
              </button>
            </div>
            <div className="modal-body">
              <div className="equipment-detail">
                <h4>{selectedEquipment.name}</h4>
                <p className="equipment-description">{selectedEquipment.description}</p>
                
                <div className="detail-grid">
                  <div className="detail-item">
                    <label>Lo·∫°i thi·∫øt b·ªã:</label>
                    <span>{selectedEquipment.type}</span>
                  </div>
                  <div className="detail-item">
                    <label>Model:</label>
                    <span>{selectedEquipment.model}</span>
                  </div>
                  <div className="detail-item">
                    <label>S·ªë serial:</label>
                    <span>{selectedEquipment.serialNumber}</span>
                  </div>
                  <div className="detail-item">
                    <label>Ph√≤ng ban:</label>
                    <span>{selectedEquipment.department}</span>
                  </div>
                  <div className="detail-item">
                    <label>V·ªã tr√≠:</label>
                    <span>{selectedEquipment.location}</span>
                  </div>
                  <div className="detail-item">
                    <label>Ng∆∞·ªùi s·ª≠ d·ª•ng:</label>
                    <span>{selectedEquipment.assignedTo}</span>
                  </div>
                  <div className="detail-item">
                    <label>Tr·∫°ng th√°i:</label>
                    <span 
                      className={`status ${selectedEquipment.status}`}
                      style={{ backgroundColor: getStatusInfo(selectedEquipment.status).color }}
                    >
                      {getStatusInfo(selectedEquipment.status).text}
                    </span>
                  </div>
                  <div className="detail-item">
                    <label>Ng√†y mua:</label>
                    <span>{selectedEquipment.purchaseDate}</span>
                  </div>
                  <div className="detail-item">
                    <label>H·∫øt h·∫°n b·∫£o h√†nh:</label>
                    <span>{selectedEquipment.warrantyExpiry}</span>
                  </div>
                  <div className="detail-item">
                    <label>Nh√† cung c·∫•p:</label>
                    <span>{selectedEquipment.supplier}</span>
                  </div>
                  <div className="detail-item">
                    <label>Gi√°:</label>
                    <span>{formatCurrency(selectedEquipment.price)}</span>
                  </div>
                  <div className="detail-item">
                    <label>B·∫£o tr√¨ l·∫ßn cu·ªëi:</label>
                    <span>{selectedEquipment.lastMaintenance}</span>
                  </div>
                  <div className="detail-item">
                    <label>B·∫£o tr√¨ ti·∫øp theo:</label>
                    <span>{selectedEquipment.nextMaintenance}</span>
                  </div>
                </div>
              </div>
            </div>
            <div className="modal-footer">
              <button 
                className="btn btn-primary"
                onClick={() => setSelectedEquipment(null)}
              >
                ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Equipment;
