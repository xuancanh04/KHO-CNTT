import React, { useState, useEffect } from 'react';
import './Inventory.css';

const Inventory = ({ userRole, addNotification }) => {
  const [inventory, setInventory] = useState([]);
  const [filteredInventory, setFilteredInventory] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('all');
  const [showAddModal, setShowAddModal] = useState(false);
  const [showImportModal, setShowImportModal] = useState(false);
  const [showExportModal, setShowExportModal] = useState(false);
  const [selectedItem, setSelectedItem] = useState(null);

  const [newItem, setNewItem] = useState({
    name: '',
    category: '',
    quantity: 0,
    unit: '',
    price: 0,
    supplier: '',
    location: '',
    minStock: 0,
    description: ''
  });

  const [importData, setImportData] = useState({
    itemId: '',
    quantity: 0,
    supplier: '',
    invoice: '',
    notes: ''
  });

  const [exportData, setExportData] = useState({
    itemId: '',
    quantity: 0,
    department: '',
    requester: '',
    purpose: '',
    notes: ''
  });

  useEffect(() => {
    // Gi·∫£ l·∫≠p d·ªØ li·ªáu kho
    const mockInventory = [
      {
        id: 1,
        name: 'M·ª±c in HP 26A (ƒêen)',
        category: 'M·ª±c in',
        quantity: 45,
        unit: 'H·ªôp',
        price: 250000,
        supplier: 'C√¥ng ty TNHH ABC',
        location: 'K·ªá A1',
        minStock: 10,
        description: 'M·ª±c in laser cho m√°y in HP LaserJet Pro M404n',
        lastUpdated: '2024-01-15'
      },
      {
        id: 2,
        name: 'M·ª±c in Canon 051 (ƒêen)',
        category: 'M·ª±c in',
        quantity: 32,
        unit: 'H·ªôp',
        price: 280000,
        supplier: 'C√¥ng ty TNHH XYZ',
        location: 'K·ªá A2',
        minStock: 8,
        description: 'M·ª±c in laser cho m√°y in Canon LBP6030w',
        lastUpdated: '2024-01-14'
      },
      {
        id: 3,
        name: 'RAM DDR4 8GB',
        category: 'Linh ki·ªán',
        quantity: 15,
        unit: 'Thanh',
        price: 850000,
        supplier: 'C√¥ng ty TNHH DEF',
        location: 'K·ªá B1',
        minStock: 5,
        description: 'RAM DDR4 8GB 2666MHz cho m√°y t√≠nh',
        lastUpdated: '2024-01-13'
      },
      {
        id: 4,
        name: '·ªî c·ª©ng SSD 256GB',
        category: 'Linh ki·ªán',
        quantity: 8,
        unit: 'C√°i',
        price: 1200000,
        supplier: 'C√¥ng ty TNHH GHI',
        location: 'K·ªá B2',
        minStock: 3,
        description: '·ªî c·ª©ng SSD SATA 256GB',
        lastUpdated: '2024-01-12'
      },
      {
        id: 5,
        name: 'C√°p m·∫°ng Cat6',
        category: 'Ph·ª• ki·ªán',
        quantity: 120,
        unit: 'M√©t',
        price: 15000,
        supplier: 'C√¥ng ty TNHH JKL',
        location: 'K·ªá C1',
        minStock: 50,
        description: 'C√°p m·∫°ng Cat6 UTP',
        lastUpdated: '2024-01-11'
      }
    ];

    setInventory(mockInventory);
    setFilteredInventory(mockInventory);
  }, []);

  useEffect(() => {
    let filtered = inventory;
    
    if (searchTerm) {
      filtered = filtered.filter(item => 
        item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.category.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.supplier.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    if (categoryFilter !== 'all') {
      filtered = filtered.filter(item => item.category === categoryFilter);
    }
    
    setFilteredInventory(filtered);
  }, [searchTerm, categoryFilter, inventory]);

  const categories = ['M·ª±c in', 'Linh ki·ªán', 'Ph·ª• ki·ªán', 'Thi·∫øt b·ªã'];

  const handleAddItem = () => {
    if (!newItem.name || !newItem.category || newItem.quantity <= 0) {
      addNotification('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc', 'error');
      return;
    }

    const item = {
      ...newItem,
      id: Date.now(),
      lastUpdated: new Date().toISOString().split('T')[0]
    };

    setInventory(prev => [...prev, item]);
    setNewItem({
      name: '', category: '', quantity: 0, unit: '', price: 0,
      supplier: '', location: '', minStock: 0, description: ''
    });
    setShowAddModal(false);
    addNotification('Th√™m s·∫£n ph·∫©m m·ªõi th√†nh c√¥ng!', 'success');
  };

  const openAddModal = () => {
    setShowAddModal(true);
    // Scroll l√™n ƒë·∫ßu trang khi m·ªü modal
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const openImportModal = () => {
    setShowImportModal(true);
    // Scroll l√™n ƒë·∫ßu trang khi m·ªü modal
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const openExportModal = () => {
    setShowExportModal(true);
    // Scroll l√™n ƒë·∫ßu trang khi m·ªü modal
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const handleImport = () => {
    if (!importData.itemId || importData.quantity <= 0) {
      addNotification('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc', 'error');
      return;
    }

    setInventory(prev => prev.map(item => 
      item.id === parseInt(importData.itemId) 
        ? { ...item, quantity: item.quantity + importData.quantity }
        : item
    ));

    setImportData({
      itemId: '', quantity: 0, supplier: '', invoice: '', notes: ''
    });
    setShowImportModal(false);
    addNotification('Nh·∫≠p kho th√†nh c√¥ng!', 'success');
  };

  const handleExport = () => {
    if (!exportData.itemId || exportData.quantity <= 0) {
      addNotification('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc', 'error');
      return;
    }

    const item = inventory.find(i => i.id === parseInt(exportData.itemId));
    if (item.quantity < exportData.quantity) {
      addNotification('S·ªë l∆∞·ª£ng xu·∫•t v∆∞·ª£t qu√° t·ªìn kho!', 'error');
      return;
    }

    setInventory(prev => prev.map(i => 
      i.id === parseInt(exportData.itemId) 
        ? { ...i, quantity: i.quantity - exportData.quantity }
        : i
    ));

    setExportData({
      itemId: '', quantity: 0, department: '', requester: '', purpose: '', notes: ''
    });
    setShowExportModal(false);
    addNotification('Xu·∫•t kho th√†nh c√¥ng!', 'success');
  };

  const getStockStatus = (quantity, minStock) => {
    if (quantity === 0) return { status: 'out', text: 'H·∫øt h√†ng', color: '#e74c3c' };
    if (quantity <= minStock) return { status: 'low', text: 'S·∫Øp h·∫øt', color: '#f39c12' };
    return { status: 'normal', text: 'C√≥ s·∫µn', color: '#27ae60' };
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  };

  return (
    <div className="inventory">
      <div className="inventory-header">
        <h1>üì¶ QU·∫¢N L√ù KHO CNTT</h1>
        <p>Qu·∫£n l√Ω xu·∫•t nh·∫≠p t·ªìn kho c√°c thi·∫øt b·ªã v√† linh ki·ªán CNTT</p>
      </div>

      {/* Controls */}
      <div className="inventory-controls">
        <div className="search-filters">
          <div className="search-box">
            <input
              type="text"
              placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          
          <select
            value={categoryFilter}
            onChange={(e) => setCategoryFilter(e.target.value)}
            className="category-filter"
          >
            <option value="all">T·∫•t c·∫£ danh m·ª•c</option>
            {categories.map(category => (
              <option key={category} value={category}>{category}</option>
            ))}
          </select>
        </div>

        <div className="action-buttons">
          {userRole === 'admin' && (
            <button 
              className="btn btn-primary"
              onClick={openAddModal}
            >
              ‚ûï Th√™m s·∫£n ph·∫©m
            </button>
          )}
          <button 
            className="btn btn-success"
            onClick={openImportModal}
          >
            üì• Nh·∫≠p kho
          </button>
          <button 
            className="btn btn-warning"
            onClick={openExportModal}
          >
            üì§ Xu·∫•t kho
          </button>
        </div>
      </div>

      {/* Inventory Table */}
      <div className="inventory-table-container">
        <table className="inventory-table">
          <thead>
            <tr>
              <th>T√™n s·∫£n ph·∫©m</th>
              <th>Danh m·ª•c</th>
              <th>S·ªë l∆∞·ª£ng</th>
              <th>ƒê∆°n v·ªã</th>
              <th>Gi√°</th>
              <th>Nh√† cung c·∫•p</th>
              <th>V·ªã tr√≠</th>
              <th>Tr·∫°ng th√°i</th>
              <th>Thao t√°c</th>
            </tr>
          </thead>
          <tbody>
            {filteredInventory.map(item => {
              const stockStatus = getStockStatus(item.quantity, item.minStock);
              return (
                <tr key={item.id}>
                  <td>
                    <div className="item-info">
                      <strong>{item.name}</strong>
                      <small>{item.description}</small>
                    </div>
                  </td>
                  <td>
                    <span className="category-badge">{item.category}</span>
                  </td>
                  <td>
                    <span className={`quantity ${stockStatus.status}`}>
                      {item.quantity}
                    </span>
                  </td>
                  <td>{item.unit}</td>
                  <td>{formatCurrency(item.price)}</td>
                  <td>{item.supplier}</td>
                  <td>{item.location}</td>
                  <td>
                    <span 
                      className="stock-status"
                      style={{ backgroundColor: stockStatus.color }}
                    >
                      {stockStatus.text}
                    </span>
                  </td>
                  <td>
                    <div className="action-buttons-small">
                      <button 
                        className="btn-small btn-info"
                        onClick={() => setSelectedItem(item)}
                        title="Xem chi ti·∫øt"
                      >
                        üìã
                      </button>
                      {userRole === 'admin' && (
                        <button 
                          className="btn-small btn-warning"
                          onClick={() => {
                            setSelectedItem(item);
                            setShowImportModal(true);
                            window.scrollTo({ top: 0, behavior: 'smooth' });
                          }}
                          title="Nh·∫≠p kho"
                        >
                          üì•
                        </button>
                      )}
                    </div>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {/* Add Item Modal */}
      {showAddModal && (
        <div className="modal-overlay">
          <div className="modal">
            <div className="modal-header">
              <h3>‚ûï Th√™m s·∫£n ph·∫©m m·ªõi</h3>
              <button 
                className="modal-close"
                onClick={() => setShowAddModal(false)}
              >
                √ó
              </button>
            </div>
            <div className="modal-body">
              <div className="form-row">
                <div className="form-group">
                  <label>T√™n s·∫£n ph·∫©m *</label>
                  <input
                    type="text"
                    value={newItem.name}
                    onChange={(e) => setNewItem({...newItem, name: e.target.value})}
                    placeholder="Nh·∫≠p t√™n s·∫£n ph·∫©m"
                  />
                </div>
                <div className="form-group">
                  <label>Danh m·ª•c *</label>
                  <select
                    value={newItem.category}
                    onChange={(e) => setNewItem({...newItem, category: e.target.value})}
                  >
                    <option value="">Ch·ªçn danh m·ª•c</option>
                    {categories.map(category => (
                      <option key={category} value={category}>{category}</option>
                    ))}
                  </select>
                </div>
              </div>
              
              <div className="form-row">
                <div className="form-group">
                  <label>S·ªë l∆∞·ª£ng *</label>
                  <input
                    type="number"
                    value={newItem.quantity}
                    onChange={(e) => setNewItem({...newItem, quantity: parseInt(e.target.value)})}
                    min="0"
                  />
                </div>
                <div className="form-group">
                  <label>ƒê∆°n v·ªã</label>
                  <input
                    type="text"
                    value={newItem.unit}
                    onChange={(e) => setNewItem({...newItem, unit: e.target.value})}
                    placeholder="H·ªôp, C√°i, M√©t..."
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>Gi√° (VNƒê)</label>
                  <input
                    type="number"
                    value={newItem.price}
                    onChange={(e) => setNewItem({...newItem, price: parseInt(e.target.value)})}
                    min="0"
                  />
                </div>
                <div className="form-group">
                  <label>Nh√† cung c·∫•p</label>
                  <input
                    type="text"
                    value={newItem.supplier}
                    onChange={(e) => setNewItem({...newItem, supplier: e.target.value})}
                    placeholder="T√™n nh√† cung c·∫•p"
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>V·ªã tr√≠ trong kho</label>
                  <input
                    type="text"
                    value={newItem.location}
                    onChange={(e) => setNewItem({...newItem, location: e.target.value})}
                    placeholder="K·ªá A1, B2..."
                  />
                </div>
                <div className="form-group">
                  <label>T·ªìn kho t·ªëi thi·ªÉu</label>
                  <input
                    type="number"
                    value={newItem.minStock}
                    onChange={(e) => setNewItem({...newItem, minStock: parseInt(e.target.value)})}
                    min="0"
                  />
                </div>
              </div>

              <div className="form-group">
                <label>M√¥ t·∫£</label>
                <textarea
                  value={newItem.description}
                  onChange={(e) => setNewItem({...newItem, description: e.target.value})}
                  placeholder="M√¥ t·∫£ chi ti·∫øt s·∫£n ph·∫©m..."
                  rows="3"
                />
              </div>
            </div>
            <div className="modal-footer">
              <button 
                className="btn btn-secondary"
                onClick={() => setShowAddModal(false)}
              >
                H·ªßy
              </button>
              <button 
                className="btn btn-primary"
                onClick={handleAddItem}
              >
                Th√™m s·∫£n ph·∫©m
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Import Modal */}
      {showImportModal && (
        <div className="modal-overlay">
          <div className="modal">
            <div className="modal-header">
              <h3>üì• Nh·∫≠p kho</h3>
              <button 
                className="modal-close"
                onClick={() => setShowImportModal(false)}
              >
                √ó
              </button>
            </div>
            <div className="modal-body">
              <div className="form-group">
                <label>S·∫£n ph·∫©m *</label>
                <select
                  value={importData.itemId}
                  onChange={(e) => setImportData({...importData, itemId: e.target.value})}
                >
                  <option value="">Ch·ªçn s·∫£n ph·∫©m</option>
                  {inventory.map(item => (
                    <option key={item.id} value={item.id}>
                      {item.name} (Hi·ªán t·∫°i: {item.quantity} {item.unit})
                    </option>
                  ))}
                </select>
              </div>
              
              <div className="form-row">
                <div className="form-group">
                  <label>S·ªë l∆∞·ª£ng nh·∫≠p *</label>
                  <input
                    type="number"
                    value={importData.quantity}
                    onChange={(e) => setImportData({...importData, quantity: parseInt(e.target.value)})}
                    min="1"
                  />
                </div>
                <div className="form-group">
                  <label>Nh√† cung c·∫•p</label>
                  <input
                    type="text"
                    value={importData.supplier}
                    onChange={(e) => setImportData({...importData, supplier: e.target.value})}
                    placeholder="T√™n nh√† cung c·∫•p"
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>S·ªë h√≥a ƒë∆°n</label>
                  <input
                    type="text"
                    value={importData.invoice}
                    onChange={(e) => setImportData({...importData, invoice: e.target.value})}
                    placeholder="S·ªë h√≥a ƒë∆°n"
                  />
                </div>
                <div className="form-group">
                  <label>Ghi ch√∫</label>
                  <input
                    type="text"
                    value={importData.notes}
                    onChange={(e) => setImportData({...importData, notes: e.target.value})}
                    placeholder="Ghi ch√∫"
                  />
                </div>
              </div>
            </div>
            <div className="modal-footer">
              <button 
                className="btn btn-secondary"
                onClick={() => setShowImportModal(false)}
              >
                H·ªßy
              </button>
              <button 
                className="btn btn-success"
                onClick={handleImport}
              >
                Nh·∫≠p kho
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Export Modal */}
      {showExportModal && (
        <div className="modal-overlay">
          <div className="modal">
            <div className="modal-header">
              <h3>üì§ Xu·∫•t kho</h3>
              <button 
                className="modal-close"
                onClick={() => setShowExportModal(false)}
              >
                √ó
              </button>
            </div>
            <div className="modal-body">
              <div className="form-group">
                <label>S·∫£n ph·∫©m *</label>
                <select
                  value={exportData.itemId}
                  onChange={(e) => setExportData({...exportData, itemId: e.target.value})}
                >
                  <option value="">Ch·ªçn s·∫£n ph·∫©m</option>
                  {inventory.map(item => (
                    <option key={item.id} value={item.id}>
                      {item.name} (Hi·ªán t·∫°i: {item.quantity} {item.unit})
                    </option>
                  ))}
                </select>
              </div>
              
              <div className="form-row">
                <div className="form-group">
                  <label>S·ªë l∆∞·ª£ng xu·∫•t *</label>
                  <input
                    type="number"
                    value={exportData.quantity}
                    onChange={(e) => setExportData({...exportData, quantity: parseInt(e.target.value)})}
                    min="1"
                  />
                </div>
                <div className="form-group">
                  <label>Ph√≤ng ban</label>
                  <input
                    type="text"
                    value={exportData.department}
                    onChange={(e) => setExportData({...exportData, department: e.target.value})}
                    placeholder="T√™n ph√≤ng ban"
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>Ng∆∞·ªùi y√™u c·∫ßu</label>
                  <input
                    type="text"
                    value={exportData.requester}
                    onChange={(e) => setExportData({...exportData, requester: e.target.value})}
                    placeholder="T√™n ng∆∞·ªùi y√™u c·∫ßu"
                  />
                </div>
                <div className="form-group">
                  <label>M·ª•c ƒë√≠ch s·ª≠ d·ª•ng</label>
                  <input
                    type="text"
                    value={exportData.purpose}
                    onChange={(e) => setExportData({...exportData, purpose: e.target.value})}
                    placeholder="M·ª•c ƒë√≠ch s·ª≠ d·ª•ng"
                  />
                </div>
              </div>

              <div className="form-group">
                <label>Ghi ch√∫</label>
                <textarea
                  value={exportData.notes}
                  onChange={(e) => setExportData({...exportData, notes: e.target.value})}
                  placeholder="Ghi ch√∫"
                  rows="3"
                />
              </div>
            </div>
            <div className="modal-footer">
              <button 
                className="btn btn-secondary"
                onClick={() => setShowExportModal(false)}
              >
                H·ªßy
              </button>
              <button 
                className="btn btn-warning"
                onClick={handleExport}
              >
                Xu·∫•t kho
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Item Detail Modal */}
      {selectedItem && (
        <div className="modal-overlay">
          <div className="modal">
            <div className="modal-header">
              <h3>üìã Chi ti·∫øt s·∫£n ph·∫©m</h3>
              <button 
                className="modal-close"
                onClick={() => setSelectedItem(null)}
              >
                √ó
              </button>
            </div>
            <div className="modal-body">
              <div className="item-detail">
                <h4>{selectedItem.name}</h4>
                <p className="item-description">{selectedItem.description}</p>
                
                <div className="detail-grid">
                  <div className="detail-item">
                    <label>Danh m·ª•c:</label>
                    <span>{selectedItem.category}</span>
                  </div>
                  <div className="detail-item">
                    <label>S·ªë l∆∞·ª£ng hi·ªán t·∫°i:</label>
                    <span className={`quantity ${getStockStatus(selectedItem.quantity, selectedItem.minStock).status}`}>
                      {selectedItem.quantity} {selectedItem.unit}
                    </span>
                  </div>
                  <div className="detail-item">
                    <label>ƒê∆°n gi√°:</label>
                    <span>{formatCurrency(selectedItem.price)}</span>
                  </div>
                  <div className="detail-item">
                    <label>Nh√† cung c·∫•p:</label>
                    <span>{selectedItem.supplier}</span>
                  </div>
                  <div className="detail-item">
                    <label>V·ªã tr√≠ trong kho:</label>
                    <span>{selectedItem.location}</span>
                  </div>
                  <div className="detail-item">
                    <label>T·ªìn kho t·ªëi thi·ªÉu:</label>
                    <span>{selectedItem.minStock} {selectedItem.unit}</span>
                  </div>
                  <div className="detail-item">
                    <label>C·∫≠p nh·∫≠t l·∫ßn cu·ªëi:</label>
                    <span>{selectedItem.lastUpdated}</span>
                  </div>
                </div>
              </div>
            </div>
            <div className="modal-footer">
              <button 
                className="btn btn-primary"
                onClick={() => setSelectedItem(null)}
              >
                ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Inventory;
